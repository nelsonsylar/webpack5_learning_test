(()=>{"use strict";var e,r,n={34:()=>{var e;document.body.appendChild(((e=document.createElement("pre")).innerHTML=["Hello webpack!","5 cubed is equal to "+(5,125)].join("\n\n"),e))}},o={};function t(e){var r=o[e];if(void 0!==r){if(void 0!==r.error)throw r.error;return r.exports}var i=o[e]={exports:{}};try{var c={id:e,module:i,factory:n[e],require:t};t.i.forEach((function(e){e(c)})),i=c.module,c.factory.call(i.exports,i,i.exports,c.require)}catch(e){throw i.error=e,e}return i.exports}t.m=n,t.c=o,t.i=[],t.hu=e=>e+"."+t.h()+".hot-update.js",t.hmrF=()=>"app."+t.h()+".hot-update.json",t.h=()=>"c828cce3c5ce0c3b5ea6",t.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),e={},r="webpack5.x:",t.l=(n,o,i,c)=>{if(e[n])e[n].push(o);else{var d,a;if(void 0!==i)for(var u=document.getElementsByTagName("script"),l=0;l<u.length;l++){var s=u[l];if(s.getAttribute("src")==n||s.getAttribute("data-webpack")==r+i){d=s;break}}d||(a=!0,(d=document.createElement("script")).charset="utf-8",d.timeout=120,t.nc&&d.setAttribute("nonce",t.nc),d.setAttribute("data-webpack",r+i),d.src=n),e[n]=[o];var p=(r,o)=>{d.onerror=d.onload=null,clearTimeout(f);var t=e[n];if(delete e[n],d.parentNode&&d.parentNode.removeChild(d),t&&t.forEach((e=>e(o))),r)return r(o)},f=setTimeout(p.bind(null,void 0,{type:"timeout",target:d}),12e4);d.onerror=p.bind(null,d.onerror),d.onload=p.bind(null,d.onload),a&&document.head.appendChild(d)}},(()=>{var e,r,n,o,i={},c=t.c,d=[],a=[],u="idle";function l(e){u=e;for(var r=0;r<a.length;r++)a[r].call(null,e)}function s(e){if(0===r.length)return e();var n=r;return r=[],Promise.all(n).then((function(){return s(e)}))}function p(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return l("check"),t.hmrM().then((function(o){if(!o)return l(v()?"ready":"idle"),null;l("prepare");var i=[];return r=[],n=[],Promise.all(Object.keys(t.hmrC).reduce((function(e,r){return t.hmrC[r](o.c,o.r,o.m,e,n,i),e}),[])).then((function(){return s((function(){return e?h(e):(l("ready"),i)}))}))}))}function f(e){return"ready"!==u?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):h(e)}function h(e){e=e||{},v();var r=n.map((function(r){return r(e)}));n=void 0;var t,i=r.map((function(e){return e.error})).filter(Boolean);if(i.length>0)return l("abort"),Promise.resolve().then((function(){throw i[0]}));l("dispose"),r.forEach((function(e){e.dispose&&e.dispose()})),l("apply");var c=function(e){t||(t=e)},d=[];return r.forEach((function(e){if(e.apply){var r=e.apply(c);if(r)for(var n=0;n<r.length;n++)d.push(r[n])}})),t?(l("fail"),Promise.resolve().then((function(){throw t}))):o?h(e).then((function(e){return d.forEach((function(r){e.indexOf(r)<0&&e.push(r)})),e})):(l("idle"),Promise.resolve(d))}function v(){if(o)return n||(n=[]),Object.keys(t.hmrI).forEach((function(e){o.forEach((function(r){t.hmrI[e](r,n)}))})),o=void 0,!0}t.hmrD=i,t.i.push((function(h){var v,m,y,b,E=h.module,g=function(n,o){var t=c[o];if(!t)return n;var i=function(r){if(t.hot.active){if(c[r]){var i=c[r].parents;-1===i.indexOf(o)&&i.push(o)}else d=[o],e=r;-1===t.children.indexOf(r)&&t.children.push(r)}else console.warn("[HMR] unexpected require("+r+") from disposed module "+o),d=[];return n(r)},a=function(e){return{configurable:!0,enumerable:!0,get:function(){return n[e]},set:function(r){n[e]=r}}};for(var p in n)Object.prototype.hasOwnProperty.call(n,p)&&"e"!==p&&Object.defineProperty(i,p,a(p));return i.e=function(e){return function(e){switch(u){case"ready":return l("prepare"),r.push(e),s((function(){l("ready")})),e;case"prepare":return r.push(e),e;default:return e}}(n.e(e))},i}(h.require,h.id);E.hot=(v=h.id,m=E,b={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:y=e!==v,_requireSelf:function(){d=m.parents.slice(),e=y?void 0:v,t(v)},active:!0,accept:function(e,r,n){if(void 0===e)b._selfAccepted=!0;else if("function"==typeof e)b._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var o=0;o<e.length;o++)b._acceptedDependencies[e[o]]=r||function(){},b._acceptedErrorHandlers[e[o]]=n;else b._acceptedDependencies[e]=r||function(){},b._acceptedErrorHandlers[e]=n},decline:function(e){if(void 0===e)b._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)b._declinedDependencies[e[r]]=!0;else b._declinedDependencies[e]=!0},dispose:function(e){b._disposeHandlers.push(e)},addDisposeHandler:function(e){b._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=b._disposeHandlers.indexOf(e);r>=0&&b._disposeHandlers.splice(r,1)},invalidate:function(){switch(this._selfInvalidated=!0,u){case"idle":n=[],Object.keys(t.hmrI).forEach((function(e){t.hmrI[e](v,n)})),l("ready");break;case"ready":Object.keys(t.hmrI).forEach((function(e){t.hmrI[e](v,n)}));break;case"prepare":case"check":case"dispose":case"apply":(o=o||[]).push(v)}},check:p,apply:f,status:function(e){if(!e)return u;a.push(e)},addStatusHandler:function(e){a.push(e)},removeStatusHandler:function(e){var r=a.indexOf(e);r>=0&&a.splice(r,1)},data:i[v]},e=void 0,b),E.parents=d,E.children=[],d=[],h.require=g})),t.hmrC={},t.hmrI={}})(),t.p="/",(()=>{var e,r,n,o,i={143:0},c={};function d(e){return new Promise(((r,n)=>{c[e]=r;var o=t.p+t.hu(e),i=new Error;t.l(o,(r=>{if(c[e]){c[e]=void 0;var o=r&&("load"===r.type?"missing":r.type),t=r&&r.target&&r.target.src;i.message="Loading hot update chunk "+e+" failed.\n("+o+": "+t+")",i.name="ChunkLoadError",i.type=o,i.request=t,n(i)}}))}))}function a(c){function d(e){for(var r=[e],n={},o=r.map((function(e){return{chain:[e],id:e}}));o.length>0;){var i=o.pop(),c=i.id,d=i.chain,u=t.c[c];if(u&&(!u.hot._selfAccepted||u.hot._selfInvalidated)){if(u.hot._selfDeclined)return{type:"self-declined",chain:d,moduleId:c};if(u.hot._main)return{type:"unaccepted",chain:d,moduleId:c};for(var l=0;l<u.parents.length;l++){var s=u.parents[l],p=t.c[s];if(p){if(p.hot._declinedDependencies[c])return{type:"declined",chain:d.concat([s]),moduleId:c,parentId:s};-1===r.indexOf(s)&&(p.hot._acceptedDependencies[c]?(n[s]||(n[s]=[]),a(n[s],[c])):(delete n[s],r.push(s),o.push({chain:d.concat([s]),id:s})))}}}}return{type:"accepted",moduleId:e,outdatedModules:r,outdatedDependencies:n}}function a(e,r){for(var n=0;n<r.length;n++){var o=r[n];-1===e.indexOf(o)&&e.push(o)}}t.f&&delete t.f.jsonpHmr,e=void 0;var u={},l=[],s={},p=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var f in r)if(t.o(r,f)){var h,v=r[f],m=!1,y=!1,b=!1,E="";switch((h=v?d(f):{type:"disposed",moduleId:f}).chain&&(E="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":c.onDeclined&&c.onDeclined(h),c.ignoreDeclined||(m=new Error("Aborted because of self decline: "+h.moduleId+E));break;case"declined":c.onDeclined&&c.onDeclined(h),c.ignoreDeclined||(m=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+E));break;case"unaccepted":c.onUnaccepted&&c.onUnaccepted(h),c.ignoreUnaccepted||(m=new Error("Aborted because "+f+" is not accepted"+E));break;case"accepted":c.onAccepted&&c.onAccepted(h),y=!0;break;case"disposed":c.onDisposed&&c.onDisposed(h),b=!0;break;default:throw new Error("Unexception type "+h.type)}if(m)return{error:m};if(y)for(f in s[f]=v,a(l,h.outdatedModules),h.outdatedDependencies)t.o(h.outdatedDependencies,f)&&(u[f]||(u[f]=[]),a(u[f],h.outdatedDependencies[f]));b&&(a(l,[h.moduleId]),s[f]=p)}r=void 0;for(var g,_=[],w=0;w<l.length;w++){var I=l[w],D=t.c[I];D&&(D.hot._selfAccepted||D.hot._main)&&s[I]!==p&&!D.hot._selfInvalidated&&_.push({module:I,require:D.hot._requireSelf,errorHandler:D.hot._selfAccepted})}return{dispose:function(){var e;n.forEach((function(e){delete i[e]})),n=void 0;for(var r,o=l.slice();o.length>0;){var c=o.pop(),d=t.c[c];if(d){var a={},s=d.hot._disposeHandlers;for(w=0;w<s.length;w++)s[w].call(null,a);for(t.hmrD[c]=a,d.hot.active=!1,delete t.c[c],delete u[c],w=0;w<d.children.length;w++){var p=t.c[d.children[w]];p&&(e=p.parents.indexOf(c))>=0&&p.parents.splice(e,1)}}}for(var f in u)if(t.o(u,f)&&(d=t.c[f]))for(g=u[f],w=0;w<g.length;w++)r=g[w],(e=d.children.indexOf(r))>=0&&d.children.splice(e,1)},apply:function(e){for(var r in s)t.o(s,r)&&(t.m[r]=s[r]);for(var n=0;n<o.length;n++)o[n](t);for(var i in u)if(t.o(u,i)){var d=t.c[i];if(d){g=u[i];for(var a=[],p=[],f=[],h=0;h<g.length;h++){var v=g[h],m=d.hot._acceptedDependencies[v],y=d.hot._acceptedErrorHandlers[v];if(m){if(-1!==a.indexOf(m))continue;a.push(m),p.push(y),f.push(v)}}for(var b=0;b<a.length;b++)try{a[b].call(null,g)}catch(r){if("function"==typeof p[b])try{p[b](r,{moduleId:i,dependencyId:f[b]})}catch(n){c.onErrored&&c.onErrored({type:"accept-error-handler-errored",moduleId:i,dependencyId:f[b],error:n,originalError:r}),c.ignoreErrored||(e(n),e(r))}else c.onErrored&&c.onErrored({type:"accept-errored",moduleId:i,dependencyId:f[b],error:r}),c.ignoreErrored||e(r)}}}for(var E=0;E<_.length;E++){var w=_[E],I=w.module;try{w.require(I)}catch(r){if("function"==typeof w.errorHandler)try{w.errorHandler(r,{moduleId:I,module:t.c[I]})}catch(n){c.onErrored&&c.onErrored({type:"self-accept-error-handler-errored",moduleId:I,error:n,originalError:r}),c.ignoreErrored||(e(n),e(r))}else c.onErrored&&c.onErrored({type:"self-accept-errored",moduleId:I,error:r}),c.ignoreErrored||e(r)}}return l}}}self.webpackHotUpdatewebpack5_x=(e,n,i)=>{for(var d in n)t.o(n,d)&&(r[d]=n[d]);i&&o.push(i),c[e]&&(c[e](),c[e]=void 0)},t.hmrI.jsonp=function(e,i){r||(r={},o=[],n=[],i.push(a)),t.o(r,e)||(r[e]=t.m[e])},t.hmrC.jsonp=function(c,u,l,s,p,f){p.push(a),e={},n=u,r=l.reduce((function(e,r){return e[r]=!1,e}),{}),o=[],c.forEach((function(r){t.o(i,r)&&void 0!==i[r]&&(s.push(d(r)),e[r]=!0)})),t.f&&(t.f.jsonpHmr=function(r,n){e&&!t.o(e,r)&&t.o(i,r)&&void 0!==i[r]&&(n.push(d(r)),e[r]=!0)})},t.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(t.p+t.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),t(34)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,